import { NextResponse } from 'next/server'
import { createClient } from '../../utils/supabase/server'

export const runtime = 'nodejs'

export async function GET(req: Request) {
    const supabase = createClient()

    try {
        // üì• ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å query string
        const { searchParams } = new URL(req.url)
        const userId = searchParams.get('user_id')

        if (!userId) {
            return NextResponse.json(
                { error: 'user_id is required' },
                { status: 400 }
            )
        }

        // üß† 1) ‡∏î‡∏∂‡∏á session ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user
        const { data: history, error: historyError } = await (await supabase)
            .from('chat_history')
            .select('id, created_at')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(1)
            .maybeSingle()

        if (historyError) {
            console.error('Error fetching chat_history:', historyError)
            return NextResponse.json(
                { error: 'Failed to fetch chat history' },
                { status: 500 }
            )
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡πÄ‡∏•‡∏¢ ‡∏™‡πà‡∏á array ‡∏ß‡πà‡∏≤‡∏á
        if (!history) return NextResponse.json({ session: null, messages: [] })

        // üì® 2) ‡∏î‡∏∂‡∏á chat_content ‡∏Ç‡∏≠‡∏á session ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const { data: messages, error: messagesError } = await (await supabase)
            .from('chat_content')
            .select('id, role, content, created_at')
            .eq('session_id', history.id)
            .order('created_at', { ascending: true })

        if (messagesError) {
            console.error('Error fetching chat_content:', messagesError)
            return NextResponse.json(
                { error: 'Failed to fetch chat content' },
                { status: 500 }
            )
        }

        // üì¶ 3) ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        return NextResponse.json({
            session: {
                id: history.id,
                created_at: history.created_at,
            },
            messages: messages ?? [],
        })
    } catch (error) {
        console.error('API error:', error)
        return NextResponse.json(
            { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
            { status: 500 }
        )
    }
}
